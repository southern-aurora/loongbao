/* eslint-disable no-console */

import ejs from "ejs";
import { join } from "node:path";
import walkSync from "walk-sync";
import { existsSync, mkdirSync, rmSync } from "node:fs";
import { cwd, exit } from "node:process";
import { unlink, writeFile } from "node:fs/promises";
import { exec as nodeExec } from "node:child_process";
import { camel, hyphen } from "@poech/camel-hump-under";

console.log("Loongbao Generating..");

const utils = {
  camel: (str: string) => camel(str).replaceAll("-", "").replaceAll("_", ""),
  hyphen: (str: string) => hyphen(str).replaceAll("_", "")
};

export async function generate() {
  rmSync(join("generate"), { recursive: true, force: true });
  // Make sure that the existing directories are all present
  existsSync(join("generate")) || mkdirSync(join("generate"));
  existsSync(join("generate", "raw")) || mkdirSync(join("generate", "raw"));
  existsSync(join("generate", "raw", "apps")) || mkdirSync(join("generate", "raw", "apps"));

  // Delete the files generated in the past and regenerate them
  try {
    await unlink(join(cwd(), "generate", "api-schema.ts"));
  } catch (error) {} // Maybe the file does not exist

  if (!existsSync(join("generate", "README.md"))) {
    await writeFile(join("generate", "README.md"), "⚠️ All files in this directory are generated by Loongbao. Please do not modify the content, otherwise your modifications will be overwritten in the next generation.");
  }

  // Write a basic framework to ensure that there are no errors when reading later
  const apiSchemaSkeleton = `
  export default {
    apiValidator: {},
    apiMethodsSchema: {},
    apiMethodsTypeSchema: {},
  }
  `;
  await writeFile(join(cwd(), "generate", "api-schema.ts"), ejs.render(apiSchemaSkeleton, { utils }));

  // Generate api-schema.ts file through templates
  const templateVars = {
    utils,
    apiPaths: [] as Array<string>,
    apiTestPaths: [] as Array<string>
  };

  const appFiles = walkSync(join(cwd(), "src", "apps"), {
    directories: false
  });

  for (const path of appFiles) {
    if (!path.endsWith(".ts")) continue;
    const module = await import(/* @vite-ignore */ `../../../src/apps/${path}`);
    if (module?.api?.isApi === true) {
      // Exclude disallowed characters
      if (path.includes("_")) {
        console.error(`\n\nPath: ` + `"${path}"`);
        console.error(`Do not use "_" in the path. If you want to add a separator between words, please use "-".\n`);
        exit(1);
      }
      if (!/^[a-z0-9/-]+$/.test(path.slice(0, -3))) {
        console.error(`\n\nPath: ` + `"${path}"`);
        console.error(`The path can only contain lowercase letters, numbers, and "-".\n`);
        exit(1);
      }

      templateVars.apiPaths.push(path);

      if (module?.test?.isApiTest === true) {
        templateVars.apiTestPaths.push(path);
      }

      // typia
      const filePath = join(cwd(), "generate", "raw", "apps", path);
      const dirPath = join(cwd(), "generate", "raw", "apps", path).split("/").slice(0, -1).join("/");
      if (!existsSync(dirPath)) {
        mkdirSync(dirPath, { recursive: true });
      }
      let importPath = "../../../";

      for (let i = 0; i < path.split("/").length - 1; i++) {
        importPath = importPath + "../";
      }
      importPath = importPath + "src/apps";
      const template = `
import typia from "typia";
import { ExecuteResultSuccess${module?.api?.meta?.enableResultsValidate ? ", _validate" : ""} } from "loongbao";
import { type TSONEncode } from "@southern-aurora/tson";
import type * as <%= utils.camel(path.slice(0, -3).replaceAll('/', '$')) %> from '${importPath}/<%= path.slice(0, -3) %>';

type ParamsT = Parameters<typeof <%= utils.camel(path.replaceAll('/', '$').slice(0, -${3})) %>['api']['action']>[0];
export const params = async (params: any) => typia.misc.validatePrune<ParamsT>(params);
`.trim();
      // export const paramsSchema = typia.json.application<[{ data: ParamsT }], "swagger">();
      // type HTTPResultsT = Awaited<ReturnType<typeof <%= utils.camel(path.replaceAll('/', '$').slice(0, -${3})) %>['api']['action']>>;
      // export const HTTPResults = async (results: any) => { ${module?.api?.meta?.enableResultsValidate ? "_validate(typia.validate<TSONEncode<ExecuteResultSuccess<HTTPResultsT>>>(results));" : ""} return typia.json.stringify<TSONEncode<ExecuteResultSuccess<HTTPResultsT>>>(results); };

      await writeFile(filePath, ejs.render(template, { ...templateVars, path }));
    }
  }

  await writeFile(
    join(cwd(), "generate", "api-schema.ts"),
    ejs.render(
      `
/**
 * ⚠️ This file is generated and modifications will be overwritten
 */

// api
<% for (const path of ${"apiPaths"}) { %>import type * as <%= utils.camel(path.slice(0, -3).replaceAll('/', '$')) %> from '${"../src/apps"}/<%= path.slice(0, -3) %>'
<% } %>
import _apiValidator from './${Bun.env.PARAMS_VALIDATE !== "false" ? "products" : "raw"}/api-validator.ts'

export default {
  apiValidator: _apiValidator,
  ${"apiMethodsSchema"}: {
    <% for (const path of apiPaths) { %>'<%= utils.hyphen(path.slice(0, -${3})) %>': () => ({ module: import('../src/apps/<%= path.slice(0, -${3}) %>') }),
    <% } %>
  },
  ${"apiMethodsTypeSchema"}: {
    <% for (const path of apiPaths) { %>'<%= utils.hyphen(path.slice(0, -${3})) %>': undefined as unknown as typeof <%= utils.camel(path.slice(0, -${3}).replaceAll('/', '$')) %>,
    <% } %>
  },
  ${"apiTestsSchema"}: {
    <% for (const path of apiTestPaths) { %>'<%= utils.hyphen(path.slice(0, -${3})) %>': () => ({ module: import('../src/apps/<%= path.slice(0, -${3}) %>') }),
    <% } %>
  },
}
 `.trim(),
      templateVars
    )
  );

  // api
  const apiValidatorTemplate = `/**
 * ⚠️This file is generated and modifications will be overwritten
 */

export default {
  generatedAt: ${new Date().getTime()},
  ${"validate"}: {
    <% for (const path of apiPaths) { %>'<%= utils.hyphen(path.slice(0, -${3})) %>': () => import('./apps/<%= utils.hyphen(path) %>'),
    <% } %>
  },
}
`.trim();
  await writeFile(join(cwd(), "generate", "raw", "api-validator.ts"), ejs.render(apiValidatorTemplate, templateVars));

  if (Bun.env.PARAMS_VALIDATE !== "false") {
    await new Promise((resolve) =>
      nodeExec("bun run ./node_modules/typia/lib/executable/typia.js generate --input generate/raw --output generate/products --project tsconfig.json", (e) => {
        resolve(e);
      })
    );
  }
}

await generate();

console.log("\n✅ Loongbao Generated!");

exit(0);
