import{_ as e,c as o,o as a,V as s}from"./chunks/framework.ajfdQ9vp.js";const u=JSON.parse('{"title":"Config Framework","description":"","frontmatter":{"title":"Config Framework"},"headers":[],"relativePath":"old/docs/config-framework.md","filePath":"old/docs/config-framework.md"}'),r={name:"old/docs/config-framework.md"},l=s(`<h1 id="config-framework" tabindex="-1">Config Framework <a class="header-anchor" href="#config-framework" aria-label="Permalink to &quot;Config Framework&quot;">​</a></h1><p>在<a href="/loongbao/old/docs/config.html">配置</a>章节中，我们介绍了如何编写配置文件。实际上，Loongbao 本身也提供了一些内置配置项。您可以通过导入 <code>configFramework</code> 来读取这些配置项。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { configFramework } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;loongbao&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(configFramework.port);</span></span></code></pre></div><h2 id="port" tabindex="-1">port <a class="header-anchor" href="#port" aria-label="Permalink to &quot;port&quot;">​</a></h2><p>类型: <code>number</code></p><p>环境变量: <code>PORT</code></p><p>默认值: <code>9000</code></p><p>启动 HTTP 服务所使用的端口。</p><h2 id="debug" tabindex="-1">debug <a class="header-anchor" href="#debug" aria-label="Permalink to &quot;debug&quot;">​</a></h2><p>类型: <code>boolean</code></p><p>环境变量: <code>DEBUG</code></p><p>默认值: <code>false</code></p><p>是否启用调试模式。开发时建议开启，生产环境请务必关闭。</p><h2 id="ignorepathlevel" tabindex="-1">ignorePathLevel <a class="header-anchor" href="#ignorepathlevel" aria-label="Permalink to &quot;ignorePathLevel&quot;">​</a></h2><p>类型: <code>number</code></p><p>环境变量: <code>IGNORE_PATH_LEVEL</code></p><p>默认值: <code>0</code></p><p>忽略路径的层级数。在使用一些 Serverless 服务来部署您的应用时，可能会有一些额外的路径，导致您本地开发时，某个 API 可能是：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>http://localhost/your-path/your-action</span></span></code></pre></div><p>而在部署之后，可能路径就变为了下面这样：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>https://a-serverless-service.com/your-id/your-project-name/production/your-path/your-action</span></span></code></pre></div><p>这时候，您就可以通过在 Serverless 服务中，设置 <code>ignorePathLevel</code> 来忽略这些额外的路径，使您的应用正常工作。</p><h2 id="corsallowmethods" tabindex="-1">corsAllowMethods <a class="header-anchor" href="#corsallowmethods" aria-label="Permalink to &quot;corsAllowMethods&quot;">​</a></h2><p>类型: <code>string</code></p><p>环境变量: <code>CORS_ALLOW_METHODS</code></p><p>默认值: <code>*</code></p><p>在浏览器中，浏览器可能会向您的应用发送一些预检请求，您可以通过设置此值来避免跨域错误。参见 <a href="https://developer.mozilla.org/en-US/old/docs/Web/HTTP/Headers/Access-Control-Allow-Methods" target="_blank" rel="noreferrer">Access-Control-Allow-Methods</a>。</p><h2 id="corsallowheaders" tabindex="-1">corsAllowHeaders <a class="header-anchor" href="#corsallowheaders" aria-label="Permalink to &quot;corsAllowHeaders&quot;">​</a></h2><p>类型: <code>string</code></p><p>环境变量: <code>CORS_ALLOW_HEADERS</code></p><p>默认值: <code>*</code></p><p>在浏览器中，浏览器可能会向您的应用发送一些预检请求，您可以通过设置此值来避免跨域错误。参见 <a href="https://developer.mozilla.org/en-US/old/docs/Web/HTTP/Headers/Access-Control-Allow-Headers" target="_blank" rel="noreferrer">Access-Control-Allow-Headers</a>。</p><h2 id="corsalloworigin" tabindex="-1">corsAllowOrigin <a class="header-anchor" href="#corsalloworigin" aria-label="Permalink to &quot;corsAllowOrigin&quot;">​</a></h2><p>类型: <code>string</code></p><p>环境变量: <code>CORS_ALLOW_ORIGIN</code></p><p>默认值: <code>*</code></p><p>在浏览器中，浏览器可能会向您的应用发送一些预检请求，您可以通过设置此值来避免跨域错误。参见 <a href="https://developer.mozilla.org/en-US/old/docs/Web/HTTP/Headers/Access-Control-Allow-Origin" target="_blank" rel="noreferrer">Access-Control-Allow-Origin</a>。</p><h2 id="cachetype" tabindex="-1">cacheType <a class="header-anchor" href="#cachetype" aria-label="Permalink to &quot;cacheType&quot;">​</a></h2><p>类型: <code>string</code></p><p>环境变量: <code>CACHE_TYPE</code></p><p>默认值: <code>redis</code></p><p>缓存类型。目前只支持 <code>redis</code> 类型。</p><h2 id="redisurl" tabindex="-1">redisUrl <a class="header-anchor" href="#redisurl" aria-label="Permalink to &quot;redisUrl&quot;">​</a></h2><p>类型: <code>string</code></p><p>环境变量: <code>REDIS_URL</code></p><p>默认值: <code>redis://:123456@your-not-redis-url:6379</code></p><p>Redis 连接地址。</p>`,47),i=[l];function t(c,d,p,n,h,g){return a(),o("div",null,i)}const m=e(r,[["render",t]]);export{u as __pageData,m as default};
