import{_ as s,c as i,o as a,V as t}from"./chunks/framework.ajfdQ9vp.js";const g=JSON.parse('{"title":"Context","description":"","frontmatter":{"title":"Context"},"headers":[],"relativePath":"old/docs/context.md","filePath":"old/docs/context.md"}'),e={name:"old/docs/context.md"},n=t(`<h1 id="context" tabindex="-1">Context <a class="header-anchor" href="#context" aria-label="Permalink to &quot;Context&quot;">​</a></h1><p>context 是一个包含当前请求上下文信息的对象。</p><p>此外，context 也可以看作是一个&quot;全局变量&quot;。您可以编写一个<a href="/loongbao/old/docs/middleware.html">中间件</a>，在其中读取用户信息，并将其附加到 <code>context.user</code> 中。在 API 中，您可以直接通过 <code>context.user</code> 来获取当前用户的信息。</p><h2 id="编写" tabindex="-1">编写 <a class="header-anchor" href="#编写" aria-label="Permalink to &quot;编写&quot;">​</a></h2><p>context 的类型定义位于 <code>/src/context.ts</code> 文件中，您可以像下面这样自由扩展它。</p><p>但是，请注意，扩展 context 的类型并不意味着数据实际上存在于 context 中。除了 context 的默认属性之外，您需要自己编写代码将数据附加到 context 上。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// file: /src/context.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { FrameworkContext } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;loongbao&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    email</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FrameworkContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="细节" tabindex="-1">细节 <a class="header-anchor" href="#细节" aria-label="Permalink to &quot;细节&quot;">​</a></h2><h3 id="必要属性" tabindex="-1">必要属性 <a class="header-anchor" href="#必要属性" aria-label="Permalink to &quot;必要属性&quot;">​</a></h3><p>在所有情况下，context 都包含以下属性：</p><ul><li><p><code>context.executeId</code>：当前请求的唯一标识符。</p></li><li><p><code>context.headers</code>：当前请求的头部信息。</p></li><li><p><code>context.path</code>: 当前请求的路径。(不包括前缀、URL Paramters)</p></li></ul><h3 id="非必要属性" tabindex="-1">非必要属性 <a class="header-anchor" href="#非必要属性" aria-label="Permalink to &quot;非必要属性&quot;">​</a></h3><p>除此之外，还有 <code>context.detail</code> 属性。它是一个对象，其中包含了一些在当前环境中可能不存在的信息。</p><p>虽然 API 通常在 HTTP 环境中运行，但它被设计为尽可能通用的方式。它也可以在其他环境中运行，例如通过命令行、作为微服务的一部分，甚至由其他 JavaScript 脚本调用等。</p><p>例如，当 API 在 HTTP 环境中运行时，<code>context.detail</code> 包含以下属性：</p><ul><li><p><code>context.detail.request</code>：当前请求对象。</p></li><li><p><code>context.detail.response</code>：当前响应对象。</p></li><li><p><code>context.detail.ip</code>：当前请求的 ip 地址。</p></li><li><p><code>context.detail.fullurl</code>：当前请求的真实 URL 对象。</p></li></ul>`,16),l=[n];function p(h,o,d,k,c,r){return a(),i("div",null,l)}const x=s(e,[["render",p]]);export{g as __pageData,x as default};
