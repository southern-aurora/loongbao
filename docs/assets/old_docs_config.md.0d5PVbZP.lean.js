import{_ as s,c as i,o as a,V as n}from"./chunks/framework.ajfdQ9vp.js";const g=JSON.parse('{"title":"Config","description":"","frontmatter":{"title":"Config"},"headers":[],"relativePath":"old/docs/config.md","filePath":"old/docs/config.md"}'),e={name:"old/docs/config.md"},t=n(`<h1 id="config" tabindex="-1">Config <a class="header-anchor" href="#config" aria-label="Permalink to &quot;Config&quot;">​</a></h1><p>在实际开发中，我们经常需要存储各种配置信息，比如与数据库的连接信息、各种秘钥等。而配置信息的获取渠道也是多样的，可能是硬编码在代码中，可能是通过<code>.env.localhost</code>文件进行配置，也可能是通过环境变量传递。</p><h2 id="编写" tabindex="-1">编写 <a class="header-anchor" href="#编写" aria-label="Permalink to &quot;编写&quot;">​</a></h2><p>我们约定俗成，将配置写在 <code>/src/config</code> 目录中，此目录没有&quot;魔法&quot;。</p><p>我们约定俗成，配置文件应该导出一个以 <code>config</code> 开头的对象，如下所示：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// file: /src/config/example.ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> configExample</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  hello: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>在任何其他位置，我们都可以直接导入此对象来读取配置。</p><h2 id="读取环境变量" tabindex="-1">读取环境变量 <a class="header-anchor" href="#读取环境变量" aria-label="Permalink to &quot;读取环境变量&quot;">​</a></h2><p>环境变量是一种常见的配置方式，然而环境变量并不具备具体的类型，所以我们所获取到的环境变量皆为字符串。</p><p>Loongbao 提供了若干方法，可帮助您将环境变量字符串转换为相应的类型。其中第二个参数用于指定在环境变量不存在时所采用的默认值。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// file: /src/config/example.ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { env } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;node:process&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { envToBoolean, envToNumber, envToString } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;loongbao&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> configExample</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  fooNumber: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">envToNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FOO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  barBoolean: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">envToBoolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  BazString: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">envToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BAZ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello-world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="指定模式" tabindex="-1">指定模式 <a class="header-anchor" href="#指定模式" aria-label="Permalink to &quot;指定模式&quot;">​</a></h2><p>Bun 内置了<a href="https://bun.sh/docs/runtime/env#setting-environment-variables" target="_blank" rel="noreferrer">环境变量</a>功能。在默认情况下，Bun 会读取 <code>.env</code> 文件。假设您在不同的环境中使用不同的环境变量，例如，在本地开发时使用一组环境变量，而在部署时使用另一组，您可以通过指定模式来实现在部署时使用不同的文件名。</p><p>例如，如果您想要使用 <code>.env.production</code> 文件，您可以通过将环境变量 <code>MODE</code> 的值设置为 <code>.env.production</code> 来实现。</p><p>此外，您还可以在执行命令时指定 <code>--mode=.env.production</code> 来实现相同的效果。</p><p>注意：如果您使用 <a href="https://www.prisma.io/" target="_blank" rel="noreferrer">Prisma</a>，由于 Prisma 不支持更改 <code>.env</code> 文件的名称，因此您可能需要额外为 Prisma 设置环境变量。</p><h2 id="读取-env-文件" tabindex="-1">读取 .env 文件 <a class="header-anchor" href="#读取-env-文件" aria-label="Permalink to &quot;读取 .env 文件&quot;">​</a></h2><p>在 <code>v1.0.12</code> 之后版本的 Bun，已经实现了<a href="https://bun.sh/docs/runtime/env#manually-specifying-env-files" target="_blank" rel="noreferrer">自动读取环境变量的功能</a>。</p><p>如果您正在使用旧版本的 Bun，同时又希望自动读取项目根目录下的 <code>.env</code> 文件，并将其注入到 <code>process.env</code> 中，您可以在 <code>/index.ts</code> 的顶部添加以下代码：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;loongbao/load-env-file&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>在 Loongbao 的 <code>.env</code> 文件中，不会对内容进行任何形式的转义，因此，您始终不需要为 <code>.env</code> 文件中的内容添加引号。</p>`,21),l=[t];function p(h,o,k,r,d,c){return a(),i("div",null,l)}const y=s(e,[["render",p]]);export{g as __pageData,y as default};
