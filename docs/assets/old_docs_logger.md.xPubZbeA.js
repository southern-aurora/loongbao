import{_ as s,c as i,o as a,V as t}from"./chunks/framework.ajfdQ9vp.js";const c=JSON.parse('{"title":"Logger","description":"","frontmatter":{"title":"Logger"},"headers":[],"relativePath":"old/docs/logger.md","filePath":"old/docs/logger.md"}'),e={name:"old/docs/logger.md"},n=t(`<h1 id="logger" tabindex="-1">Logger <a class="header-anchor" href="#logger" aria-label="Permalink to &quot;Logger&quot;">​</a></h1><p>日志在应用线上问题排查中扮演着重要的角色。虽然我们可以使用 <code>console</code> 打印日志，但我们的日志需求可能更加多样化。例如，在本地调试时，我们希望将日志直接输出在终端中，以方便我们查看；而在生产环境中，为了节省性能，我们不希望将日志直接打印在终端，而是将其保存到文件中，或者发送到专业的日志系统中。</p><p>Loongbao 提供了一个强大的日志记录器，可以满足您的需求。Loongbao 本身的日志也是通过这个日志记录器写入的。</p><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2><p>我们可以随时使用<code>useLogger</code>方法创建一个日志记录器，需要提供一个<code>executeId</code>参数。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> logger</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context.executeId);</span></span></code></pre></div><p>我们可以使用该日志记录器写入不同级别的日志。与<code>console</code>类似，它的用法几乎一样。唯一的区别是，日志的第一个参数必须是一个描述日志信息的字符串，也称为&quot;日志描述&quot;。从第二个参数开始，您可以传递任意类型的参数，它们被称为&quot;日志参数&quot;。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">debug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Your Message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { hello: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span></code></pre></div><h3 id="executeid" tabindex="-1">executeId <a class="header-anchor" href="#executeid" aria-label="Permalink to &quot;executeId&quot;">​</a></h3><p>使用日志记录器时，您需要传入<code>executeId</code>参数。该参数来自您的 API 的<code>context</code>对象，并且是唯一的。对于每个请求，<code>executeId</code>都是不同的。Loongbao 的日志记录器通过它们来区分不同的请求。</p><p>在高并发的场景中，不同的用户会在同一时间向您发送请求。这意味着不同用户请求的日志可能会交错出现。当出现问题时，我们往往无法确定一条日志属于哪个请求，这给我们在生产环境中的故障排查带来了很大困扰。因此，我们强烈建议您传入<code>executeId</code>。但在某些特殊情况下，您可能无法获取到<code>executeId</code>。这种情况下，您可以传入<code>global</code>，日志记录器将向所有并发请求同时写入该日志。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> logger</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;global&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="完整例子" tabindex="-1">完整例子 <a class="header-anchor" href="#完整例子" aria-label="Permalink to &quot;完整例子&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// file: /src/app/api.ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useLogger, defineApi } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;loongbao&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> helloWorld</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineApi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  meta: {},</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">params</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> logger</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context.executeId);</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">debug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello world!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello world!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">warn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello world!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello world!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="日志标签" tabindex="-1">日志标签 <a class="header-anchor" href="#日志标签" aria-label="Permalink to &quot;日志标签&quot;">​</a></h2><p>除了打印日志之外，您还可以为一个请求打上日志标签。通过 <code>loggerPushTags</code> 方法，可以为某个请求添加若干自定义标签。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { loggerPushTags } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;loongbao&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loggerPushTags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(executeId, { userInfo: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, permissions: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span></code></pre></div><p>在以往的日志中，我们常常直接将请求的用户信息、权限等数据输出到日志中，这样会掩盖了关键信息。合理地使用标签有助于使您的日志更加清晰易读，只保留关键信息。</p><h2 id="原有日志标签" tabindex="-1">原有日志标签 <a class="header-anchor" href="#原有日志标签" aria-label="Permalink to &quot;原有日志标签&quot;">​</a></h2><p>Loongbao 会为您的每个请求打上多个日志标签。通常，以下标签会被使用：</p><table><thead><tr><th style="text-align:right;">Key</th><th>Value</th></tr></thead><tbody><tr><td style="text-align:right;"><code>from</code></td><td>来源 &quot;http-server&quot; | &quot;execute&quot;</td></tr><tr><td style="text-align:right;"><code>executeId</code></td><td>执行此请求的唯一 id</td></tr><tr><td style="text-align:right;"><code>method</code></td><td>请求方式</td></tr><tr><td style="text-align:right;"><code>ip</code></td><td>请求发起者的 IP 地址</td></tr><tr><td style="text-align:right;"><code>url</code></td><td>请求地址</td></tr><tr><td style="text-align:right;"><code>params</code></td><td>请求的参数 (Object)</td></tr><tr><td style="text-align:right;"><code>body</code></td><td>最终响应的数据 (Raw String)</td></tr><tr><td style="text-align:right;"><code>timein</code></td><td>接收到请求的时间 (Number)</td></tr><tr><td style="text-align:right;"><code>timeout</code></td><td>请求响应的时间 (Number)</td></tr><tr><td style="text-align:right;"><code>requestHeaders</code></td><td>请求头 (Object)</td></tr><tr><td style="text-align:right;"><code>responseHeaders</code></td><td>响应头 (Object)</td></tr></tbody></table><p>注意，您不能假设这些日志标签始终存在。例如，在某些极端情况下，请求被直接终止时，可能不会添加<code>body</code>、<code>params</code>、<code>responseHeaders</code>等内容。此外，当通过编写 <code>execute</code> 代码而不是发送 HTTP 请求的方式进行调用时，像 <code>ip</code> 等数据将不存在，并且可能会获得其他一些值。</p><h2 id="自定义日志记录器" tabindex="-1">自定义日志记录器 <a class="header-anchor" href="#自定义日志记录器" aria-label="Permalink to &quot;自定义日志记录器&quot;">​</a></h2><p>您可以根据需要自由修改 <code>/src/logger.ts</code> 来自定义日志记录器的行为。默认情况下，根据代码编写，您的日志记录器会直接在控制台中显示日志。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// file: /src/logger.ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LoggerOptions, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ExecuteId } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;loongbao&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loggerOptions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onSubmit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">tags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">logs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`🧊 Loongbao Responsed! by :\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, tags.url);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tags));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onInsert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console[options.loggerLevel](options.description, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">options.params);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">satisfies</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LoggerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="onsubmit" tabindex="-1">onSubmit <a class="header-anchor" href="#onsubmit" aria-label="Permalink to &quot;onSubmit&quot;">​</a></h3><p><code>onSubmit</code> 方法会在一个请求即将结束时被调用，它可以是一个异步方法或返回一个<code>Promise</code>。您可以在此阶段将与该请求相关的日志持久化保存。</p><p>在这个方法中，您不仅可以获取该请求中记录的所有历史日志，还可以获取该请求上打过的所有标签。</p><h3 id="oninsert" tabindex="-1">onInsert <a class="header-anchor" href="#oninsert" aria-label="Permalink to &quot;onInsert&quot;">​</a></h3><p><code>onInsert</code> 方法是用于在每次记录日志时被调用的，它必须是一个同步方法。您需要返回 <code>true</code> 或 <code>false</code>。当您返回 <code>false</code> 时，该日志将被丢弃。举个例子，您可以通过返回 <code>false</code> 来实现在生产环境中不记录 <code>debug</code> 级别日志的功能。</p><p>请不要在此方法中进行日志的持久化保存（例如将日志写入文件或发送到各种日志系统中）。由于每次请求都可能需要写入大量日志，这将导致频繁的 IO 操作，从而降低性能。</p>`,31),h=[n];function l(p,k,d,o,r,g){return a(),i("div",null,h)}const y=s(e,[["render",l]]);export{c as __pageData,y as default};
